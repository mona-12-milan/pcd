
%{

void yyerror (char *s);
int yylex();
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
int symbols[52];
int symbolVal(char symbol);
void updateSymbolVal(char symbol , int val);

%}

%union {int num ; char id;}
%start line
%token print
%token exit_command
%token <num> number
%token <id> identifier
%type <num> line exp term exp2 exp3 exp4
%type <id> assignment

%%


line : assignment ';'           {;}
     | exit_command ';'         {exit(EXIT_SUCCESS);}
     | print exp ';'            {printf("printing %d\n",$2);}
     | line assignment ';'      {;}
     | line print exp ';'       {printf("printing %d\n",$3);}
     | line exit_command ';'    {exit(EXIT_SUCCESS);}
     ;

assignment : identifier '=' exp {updateSymbolVal($1 , $3);}
           ;

exp     : exp '-' exp           {$$ = $1 - $3 ; }
        | exp '+' exp           {$$ = $1 + $3 ; }
        | exp2                  {$$ = $1;}

        ;


exp2    : exp2 '*' exp3         {$$ = $1 * $3 ; }
        | exp2 '/' exp3         {$$ = $1 / $3 ;}
        | exp3                  {$$ = $1;}
        ;

exp3    : term                  {$$ = $1 ;}
        | exp                   {$$ = $1 ;}
        | exp4                  {$$ = $1 ;}
        ;

exp4    : '(' exp ')'           {$$ = $2 ;}
        ;

term    : identifier            {$$ = symbolVal($1);}
        | number                {$$ = $1 ; }
        ;
%%

int computeSymbolIndex(char token)
{

        int idx = -1;
        if (islower(token)){

                idx = token - 'a' + 26 ;

        }else{

                idx  = token - 'A';
        }
        return idx;
}

int symbolVal(char symbol)
{
        int ind = computeSymbolIndex(symbol);
        return symbols[ind];

}


void updateSymbolVal(char symbol , int val)
{

        int ind = computeSymbolIndex(symbol);
        symbols[ind] = val;

}

int main(void){

        int i ;
        for (i =0 ; i< 52 ; i++)
        {
                symbols[i] = 0;
        }

        return yyparse();

}

void yyerror ( char *s) { fprintf (stderr , "%s\n" , s);}
